#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Jan 11, 2019 12:32:59 PM EST  platform: Windows NT

import sys
from .Fridge import Fridge
from .Alcoholic import Alcoholic
from .Glass import Glass
from .Inventory import Inventory


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

fridge = Fridge()
glass = Glass()
inventory = Inventory()


def search(text, prev, next, inventory_list, textbox_selected, success_message, page_message):
    print('PyDrink_support.search: %s' % text)
    if text == "":
        text = None

    inventory.page = 1
    inventory.search_params = text

    inventory.get_products(text)
    insert_manager_tree(inventory_list, inventory, textbox_selected, success_message)

    if inventory.page == 1:
        prev.configure(state=tk.DISABLED)
    if inventory.final_page:
        next.configure(state=tk.DISABLED)

    text = "Page %g of %g" % (inventory.page, inventory.num_pages)
    page_message.configure(text=text)

    sys.stdout.flush()


def btn_add_glass_lclick(p1, tree, glass_list, success_message):
    print('PyDrink_support.btn_add_glass_lclick')
    print('p1 = {0}'.format(p1))

    """Event triggered when add to glass button is pressed
    1. Empties the Glass TreeView in Glass tab
    2. Repopulates it with all selected Beverages in the Fridge tab"""
    for child in glass_list.get_children():
        glass_list.delete(child)

    # Iterate through all items in TreeView adding all selected items to Glass
    count = 0
    for child in tree.get_children():
        if str(tree.item(child, "values")) == "('Yes',)":
            count += 1
            glass_list.insert('', 'end', text=tree.item(child, "text"), values=tree.item(child, "values"))

    if count > 0:
        success_`message.configure(state=tk.NORMAL)

    sys.stdout.flush()


def btn_add_fridge_lclick(inventory_list, success_message, page_message):
    print('PyDrink_support.btn_add_fridge_lclick')
    """Event triggered when add to fridge button is pressed
        1. Adds selected drinks to the fridge tab"""
    count = 0
    for child in inventory_list.get_children():
        if str(inventory_list.item(child, "values")) == "('Yes',)" and not fridge.find_drink('name',
               inventory_list.item(child, "text")):
            print("Adding %s" % inventory_list.item(child, "text"))
            count += 1
            d = inventory.find_drink('name', inventory_list.item(child, "text"))
            d.selected = False
            fridge.add_drink(d)
            fridge.save()

    if count > 0:
        success_message.configure(state=tk.NORMAL)

    text = "Page %g of %g" % (inventory.page, inventory.num_pages)
    page_message.configure(text=text)

    sys.stdout.flush()


def btn_remove_fridge_lclick(tree, description):
    print('PyDrink_support.btn_remove_fridge_lclick')
    """Event triggered when remove from fridge button is pressed
            1. Remove selected drinks to the fridge tab"""
    try:
        item = tree.selection()[0]
        drink = fridge.find_drink('name', tree.item(item, "text"))
    except IndexError:
        drink = None
        pass

    if drink is not None:
        tree.delete(item)
        fridge.remove_drink(drink.id)
        description.delete('1.0', tk.END)
        fridge.save()

    sys.stdout.flush()


def btn_inv_prev_lclick(prev, next, inventory_list, textbox_selected, success_message, page_message):
    print('PyDrink_support.btn_inv_prev_lclick')

    """Event triggered when prev button is pressed
    1. Empties the Inventory TreeView in Inventory tab
    2. Repopulates it with previous page"""
    for child in inventory_list.get_children():
        inventory_list.delete(child)

    inventory.page -= 1
    next.configure(state=tk.NORMAL)

    inventory.get_products(inventory.search_params)
    insert_manager_tree(inventory_list, inventory, textbox_selected, success_message)

    if inventory.page == 1:
        prev.configure(state=tk.DISABLED)

    text = "Page %g of %g" % (inventory.page, inventory.num_pages)
    page_message.configure(text=text)

    sys.stdout.flush()


def btn_inv_next_lclick(prev, next, inventory_list, textbox_selected, success_message, page_message):
    print('PyDrink_support.btn_inv_next_lclick')

    """Event triggered when prev button is pressed
    1. Empties the Inventory TreeView in Inventory tab
    2. Repopulates it with previous page"""
    for child in inventory_list.get_children():
        inventory_list.delete(child)

    inventory.page += 1
    prev.configure(state=tk.NORMAL)

    inventory.get_products(inventory.search_params)
    insert_manager_tree(inventory_list, inventory, textbox_selected, success_message)

    if inventory.final_page:
        next.configure(state=tk.DISABLED)

    text = "Page %g of %g" % (inventory.page, inventory.num_pages)
    page_message.configure(text=text)

    sys.stdout.flush()


def ntb_open_inventory(p1, tree, textbox_selected, success_message, page_message):
    print('PyDrink_support.ntb_open_inventory')
    print('p1 = {0}'.format(p1))

    """Event triggered when the inventory tab is opened
        Call method to add drinks from the API to the TreeView"""

    insert_manager_tree(tree, inventory, textbox_selected, success_message)
    text = "Page %g of %g" % (inventory.page, inventory.num_pages)
    page_message.configure(text=text)
    sys.stdout.flush()


def ntb_open_fridge(p1, tree, textbox_selected, success_message):
    print('PyDrink_support.ntb_open_fridge')
    print('p1 = {0}'.format(p1))

    """Event triggered when the fridge tab is opened
    Call method to add drinks from the fridge to the TreeView"""

    success_message.configure(state=tk.DISABLED)
    insert_manager_tree(tree, fridge, textbox_selected, success_message)

    sys.stdout.flush()


def ntb_open_glass(p1, tree, cocktail_tree, textbox_selected):
    print('PyDrink_support.ntb_open_glass')
    print('p1 = {0}'.format(p1))

    """Event triggered when the Glass tab is opened
        Call method to add drinks from the glass object to the TreeView,
        Call method to add cocktails to the TreeView"""

    cocktail_categories = {}
    alcoholic = []
    non_alcoholic = []

    """Iterate through all items in TreeView adding all to dict obj"""
    glass.clear_drinks()
    for child in tree.get_children():
        drink = fridge.find_drink('name', tree.item(child, "text"))
        if not glass.has_drink(drink.id):
            glass.add_drink(drink)
        if isinstance(drink, Alcoholic):
            alcoholic.append(drink.category)
        else:
            non_alcoholic.append(drink.name)

    cocktail_categories["Alcoholic"] = alcoholic
    cocktail_categories["NonAlcoholic"] = non_alcoholic
    insert_cocktail_tree(cocktail_tree, glass.find_cocktails(cocktail_categories), textbox_selected)

    sys.stdout.flush()


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


def insert_manager_tree(tree, obj, textbox_selected, success_message=None):
    """Insertion method."""
    #Clears TreeView
    for child in tree.get_children():
        tree.delete(child)

    for drink in obj.drinks.values():
        selected = 'No'
        if drink.selected:
            selected = 'Yes'
        tree.insert('', 'end', text=str(drink.name),
                    values=selected)
        tree.bind("<Double-1>", lambda e: stv_list_selected_dclick(e, tree, obj, success_message))
        tree.bind("<ButtonRelease-1>", lambda e: stv_select_lclick(e, tree, obj, textbox_selected))


def insert_cocktail_tree(tree, obj, textbox_selected):
    """Insertion method."""
    # Clears TreeView
    for child in tree.get_children():
        tree.delete(child)

    for cocktail in obj:
        tree.insert('', 'end', text=str(cocktail.name),
                    values='No')
        tree.bind("<ButtonRelease-1>", lambda e: stv_cocktail_selected(e, tree, textbox_selected))


def stv_select_lclick(p1, tree, obj, textbox_selected):
    """Update Description of selected frame"""
    print('PyDrink_support.stv_list_selected_lclick')
    print('p1 = {0}'.format(p1))

    try:
        item = tree.selection()[0]
        drink = obj.find_drink('name', tree.item(item, "text"))
    except IndexError:
        drink = None
        pass

    if drink is not None:
        # 1 - line 0 - coloumn
        textbox_selected.delete('1.0', tk.END)
        textbox_selected.insert('1.0', str(drink))


def stv_cocktail_selected(p1, tree, textbox_selected):
    """Update Description of selected frame"""
    print('PyDrink_support.stv_cocktail_selected')
    print('p1 = {0}'.format(p1))
    try:
        item = tree.selection()[0]
        cocktail = glass.get_cocktail(tree.item(item, "text"))
    except IndexError:
        cocktail = None
        pass

    if cocktail is not None:
        # 1 - line 0 - coloumn
        textbox_selected.delete('1.0', tk.END)
        textbox_selected.insert('1.0', str(cocktail))


def stv_list_selected_dclick(p1, tree, obj, success_message):
    """Update Selection of drink in fridge"""
    print('PyDrink_support.stv_list_selected_dclick')
    print('p1 = {0}'.format(p1))
    try:
        item = tree.selection()[0]
        drink = obj.find_drink('name', tree.item(item, "text"))

        # Flip sign of selected
        if tree.item(item, "values")[0] == 'No':
            tree.item(item, values='Yes')
            drink.selected = True
        else:
            tree.item(item, values='No')
            drink.selected = False

        if success_message is not None:
            success_message.configure(state=tk.DISABLED)

        if type(obj) is Fridge:
            obj.save()
    except:
        pass


if __name__ == '__main__':
    import PyDrink
    PyDrink.vp_start_gui()




