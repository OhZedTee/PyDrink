************************
Program Description:

An Drink Manager that monitors the
drinks you have and helps you find
cocktails you can make with it.
NOTE: For this assignment all data
is coming from the LCBO API running
on the cis4450.socs.uoguelph.ca server.
Please make sure you are connected
to the school VPN before running this
application.

The inventory is where the API is
connected and allows you to view
the LCBO products. You can search
based off any parameter and can
add multiple parameters together:
i.e. "Yellow", "Apple", "Vodka",
	 "Red Wine", etc...

To add a drink from your inventory
to your fridge, you need to select
a drink with a left click and then
right click the drink to add it to
your cart. At that point pressing 
the Add To Fridge Button will add
any drink in your cart to your Fridge.

The same UI principles are in effect
in the Fridge Tab. Select the drinks
you might want to make a cocktail 
from.

In the Glass tab, you can see what drinks
are selected (however you cant click on them)
you can however see the cocktails you
can make. Left clicking on them will show
you how to make each cocktail.

Note* Due to the nature of the data
I am working with there is a chance that
the cocktails available are not accurate
to the types of drinks you have added.
I have tried to mitigate this as much as possible
but there are limitations to what I can do
with the bad data I have managed to find for
free.

TLDR:
Inventory + Fridge Tab:
Left click on a drink - shows description and selects drink
Right click on a drink that is selected - Adds drink to cart
Pressing 'Add To Glass/Add To Fridge' button - Adds all drinks
in the cart to glass/fridge tab.

Glass Tab:
Shows all drinks you've selected
Single click on any cocktail - shows whats required for
making the cocktail choosen

NOTE: Here are some cocktails for you
to try to make using the app:

Gin and Tonic:
Dillion's Unfiltered (Gin)
Tonic

Manhattan:
Martini's Vermouth (Sweet Vermouth)
Buffalo Trace (Bourbon Whiskey)

Try something else out, maybe you'll find
other cocktails you never knew existed!

Note: Non Alcoholic Beverages are mocked
in data/mock/nonalcoholic.csv. Feel free
to add your own to the mock data to use
in making drinks.
**************************

*************************************
User Guide - !!REQUIRES Python 3.7! Check which version you have
with the following command 'python --version' or 'python3 --version' if you don't have it
please install: https://www.python.org/downloads/release/python-372/!

Which ever --version command gives you 3.7 (python or python3, please use that
command for the rest of the setup instructions)

1. This software requires TKinter. If the program doesn't start correctly
   with below step please visit https://www.activestate.com/products/activetcl/downloads/
   to install ActiveTcl which adds Tkinter to Python distribution (make sure you install 8.5+,
   not 8.4 or lower)
1a. on linux, installing python-tk package or python3-tk package should do the trick
	(sudo apt-get install python3-tk) 
1b. on MacOSX Python 3.1+ should include tkinter as part of the distribution (cannot vouch for that though)
1c. Follow this tutorial if all above fails: https://tkdocs.com/tutorial/install.html
2.  Run command on terminal: make run 
	*NOTE this will attempt to clean and rebuild all bytecode so if none found disregard the error message
	 ALSO this will attempt both python and python3 command, so ignore command not found error if it appears for one or the other
2a. If make doesnt exist and on Windows OS install MinGW: https://osdn.net/projects/mingw/downloads/68260/mingw-get-setup.exe/
2b. The above step installs the manager, then select mingw32-make-bin package and install it. Go to the install directory and copy the
	file mingw32-make.exe calling it make.exe. Then add the directory to make to your path variable (system environment variables)
	Restart your terminal and you should now be able to run command 'make run'
3.  If make still doesnt work, type python3 || python PyDrink.py


*************************************
Known Limitations, Assumptions and Errors
NOTE: The following error will occur periodically
when closing the application. It has nothing to do
with the software I wrote. It is a known bug so do not
be alarmed
in Tkinter:

	Exception ignored in: <function Image.__del__ at 0x00000250903E48C8>
	Traceback (most recent call last):
		File "...\Python\Python37\lib\tkinter\__init__.py", line 3508, in __del__
	TypeError: catching classes that do not inherit from BaseException is not allowed
	Exception ignored in: <function Image.__del__ at 0x00000250903E48C8>
	Traceback (most recent call last):
		File "...\Python\Python37\lib\tkinter\__init__.py", line 3508, in __del__
	TypeError: catching classes that do not inherit from BaseException is not allowed
	Exception ignored in: <function Image.__del__ at 0x00000250903E48C8>
	Traceback (most recent call last):
		File "...\Python\Python37\lib\tkinter\__init__.py", line 3508, in __del__
	TypeError: catching classes that do not inherit from BaseException is not allowed
*************************************

*************************************
Coding Style
- Class names use PascalCase
- Private variables use a _ prepending
the variable name
- Variable and method names are 
written 'like_this' all lowercase
according to PEP8 standards
*************************************

**********************************************************************************************
Learning Outcomes:
LO1:  Demonstrate best practices for OO development in the language of your choice.
- Added Controller Glass for my GUI - Called PyDrinkController. One controller that handles all the models 
  was decided in my design since my controller needs multiple Models to handle events properly. If
  I split up my controllers, I would have to add coupling between controllers and split handling an event in multiple
  controllers which is more than having the 3 models handled in the one controller.
LO2:  Utilize persistence effectively to realize a user story that could not be realized without persistence.
- Added Serialization to Fridge Class which saves the Fridge object to data/fridge.bin 
- This allows for the Fridge state to be stored and loaded on application closure and boot.
- See Method parse() and save() in Fridge class lines 30 and 38 respectively
L03: Facilitate the addition of portability to your program via the definition and creation of portable objects.
- Added JSON portability to the Drink object and its child classes Alcoholic and NonAlcoholic. This will allow
  me to easily send and receive drink objects on the web.
- See dumps() method in Drinks.py, Alcoholic.py, and NonAlcoholic.py classes. Also see Encoder Class, this
  implements a custom JSONEncoder for the json.dumps method to retrieve the public equivalent of private variables.

Persistent Storage Rational:

Portable Storage Rational:

+++++++++++++++++++++++++++++++++++++++IMPORTANT EXPLANATION OF ALL CLASSES+++++++++++++++++++++++++++++++++++++++++
	Models:
		src/Manager: List of Drinks, required methods for child classes
		src/Fridge: Implementation of Manager required methods
		src/Glass: Implementation of Manager required methods
		src/Inventory: Implementation of Manager required methods + Parses API data + Parses mock data
		src/Drink: Base drink class which all drinks inherit from. Attributes: ID, Name, Cost, Description
		src/Alcoholic: Child class of Drink. Attributes: APV (alcohol per volume), Package, Category
		src/NonAlcoholic: Child class of drink. Attributes: Carbonation (True, False), Sugar Content, Package, Caffeine Content
	View: 
		PyDrink: GUI class
	Controller:
		ui/PyDrinkController: GUI event handlers + Maintains models
						*There is one controller that handles all the models
						 since some of the event handlers require multiple models
						 in order to function properly
	src/Encoder: Encoder for the JSON format to use public variables instead of private
	ui/ROText: Custom GUI Textbox that disables common functionality to work as a READ-ONLY Text box
	           (i.e. Disabled: paste, editing, deleting, Undoing, Redoing, etc.)
	ui/ScrolledTreeView: Custom GUI TreeView (the tables you see in the UI) that are scrollable
	                     to allow for multipaged display with a convenient scroll bar
	ui/SearchBox: Custom GUI Searchbox taken from Tkinter's public recipes and adapted for 
	                     the purposes of this app.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

**********************************************************************************************

**********************************************************************************************
User Stories Implemented:
1. As a user I want to be able to select from a slew of drinks that I may have at home so
   that I can add them to my fridge and use them for cocktails
2. As a user I want to be able to get specific information about any drink I have at home
   so that I can make informed decisions about what I consume and the cost of consuming
3. As a user I want to be able to store the information from my fridge so that I can
   reload all the information back on application startup
4. As a user I want to be able to see cocktails that can be made only from the
   Drinks I've selected so that I'm not required to buy anything else to make
   them (other than garnishes). (In A1, it was any drink selected is enough for a cocktail,
   i.e. if I select just Vodka, I can make Sex on the Beach which requires Vodka and Peach Schnapps,
   now it needs every requirement for a drink to be made, harder to implement than it sounds with my bad data)
5. As a user I want to be able to add Non Alcoholic beverages to my Fridge
   so that I can use them to make cocktails (Currently only from file, no UI)
6. As a system administrator I want to be able to see JSON data about each Drink as part of
   the description so that I can display it on the web (will be used in A3)
**********************************************************************************************

**********************************
Sources:

- https://krzysztofzuraw.com/blog/2016/makefiles-in-python-projects.html
- http://net-informations.com/python/iq/interfaces.htm
- http://page.sourceforge.net/
- http://code.activestate.com/recipes/580773-tkinter-search-box/
**********************************

****************************************************************************************************************
Clarification based of A1 Peer Review: (R- Review) (A - Answer)

R: The distinction between cocktail and drink is a bit fuzzy[-1]. I get that a cocktail has a drink and a glass. However, if I ever had to use your code] and just had a look at the class names. I would assume cocktail is a drink.
A: A Cocktail is made up of many drinks. While there is no list of drinks in my cocktail class, it has categories of drinks that must be satisfied. A Glass is where you make your cocktail. You add drinks to your glass in order to
   make the cocktail.
   
   
   
R: For some reason, the glass tab does not show any of the drinks selected.
A: To add selected drinks to the glass tab, please press add to glass button. This was done so that the user has a distinction between selecting a drink in the inventory (to see its description) and 
   adding the drink to their glass (by pressing a button) for making a cocktail. If more people are confused by this, I could remove the button altogether and make it so if you selected a drink
   its added to the glass tab immediately.