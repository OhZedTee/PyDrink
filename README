##Overview##
This is a Drink Manager App that monitors the drinks you have and helps you find
cocktails you can make with it.

For this assignment all data (except NonAlcoholic Mock data) is coming from the LCBO API running on the cis4450.socs.uoguelph.ca server.
Please make sure you are connected to the school VPN before running this application.

Non Alcoholic Beverages are mocked in data/mock/nonalcoholic.csv. Feel free to add your own to the mock data to use
in making drinks. These Non Alcoholic drinks will appear straight in your fridge (not in the inventory) and can not
be removed permanently without removing them from nonalcoholic.csv. You can remove them for a session, but the next
time you open the app, they will be there.

The inventory is where the API is connected and allows you to view the LCBO products. You can search based off any parameter and can
add multiple parameters together:
i.e. "Yellow", "Apple", "Vodka",
     "Red Wine", etc...

To add a drink from your inventory to your fridge, you need to select a drink with a left click and then
right click the drink to add it to your cart. At that point pressing the Add To Fridge Button will add
any drink in your cart to your Fridge.

The same UI principles are in effect in the Fridge Tab, Except no need for an Add To Glass Button. 
Select the drinks you might want to make a cocktail from and they will appear in the glass tab.

In the Glass tab, you can see what drinks are selected (however you cant click on them) and the cocktails you
can make. Left clicking on the cocktails will show you how to make each cocktail.

Note* Due to the nature of the data I am working with there is a chance that the cocktails available are not accurate
to the types of drinks you have added. I have tried to mitigate this as much as possible but there are limitations to what I can do
with the bad data I have managed to find for free.

TLDR:
Inventory Tab:
Left click on a drink - shows description and selects drink
Right click on a drink that is selected - Adds drink to cart
Pressing 'Add To Fridge' button - Adds all drinks
in the cart to the fridge tab.

Glass Tab:
Shows all drinks you've selected in the fridge tab
Single click on any cocktail - shows whats required for
making the cocktail chosen

HERE ARE SOME COCKTAILS TO TRY MAKING:

Gin and Tonic:
Dillion's Unfiltered (Gin)
Tonic

Manhattan:
Martini's Vermouth (Sweet Vermouth)
Buffalo Trace (Bourbon Whiskey)

Try something else out, maybe you'll find
other cocktails you never knew existed!



##User Stories:##
1. As a user I want to be able to get updated specific information from the LCBO store
   so that I can make informed decisions about what I want to drink
2. As a user I want to be able to read the recipe in multiple languages so that I can
   can translate it to friends and family who don't speak english
3. As a user I want to be able to hear the recipe spoken to me so that as a seeing 
   impaired individual I can hear the recipe instead of reading small text


All of the user stories have been implemented in the application.



##Requirements:##
  Python 3.7.2 (not negotiable, modules required from 3.7, so 3.5 is not enough unless you are able to get around some module dependencies)
    Check which version you have
    with the following command 'python --version' or 'python3 --version' if you don't have it
    please install: https://www.python.org/downloads/release/python-372/
  tkinter
  PyYaml
  ABC (Abstract Base Class, requires Python 3.x, if the program complains about this, its because you aren't using Python 3.x)
  PyGame
  BeautifulSoup4
  lxml
  

##Instructions for Running:##

Which ever --version command gives you 3.7 ('python' or 'python3', please use that
command for the rest of the setup instructions)

Linux
  1. On linux, installing python-tk package or python3-tk package should do the trick
    (sudo apt-get install python3-tk) 
  2. Follow the following tutorial if the above fails: https://tkdocs.com/tutorial/install.html
  3. Run command python -m pip install --upgrade pip setuptools wheel (to update wheel projects)
  4. Run command sudo pip install pyyaml, if this doesnt work try sudo pip3 install pyyaml. If that doesnt work, I'm sure google has another way.
  5. Do the same as 4 for the following packages:
     - pygame
     - requests
     - beautifulsoup4
     - lxml
  6. Run command on terminal: make run 
        this will attempt both python and python3 command, so ignore command not found error if it appears for one or the other
  7. If make doesnt work, type python3 || python PyDrink.py
  8. This application uses an external API running on cis4450.socs.uoguelph.ca server. If it doesnt work for some
        reason (If the inventory page is empty), make sure you are connected with Cisco AnyConnect, if it still
        doesn't work, please see README in lcbo-api folder to set up the API locally.
        Once the API is running locally. Go to data/ folder and edit
        config.yml: host: localhost (or 127.0.0.1) and port:3000
        
Mac
  1. On MacOSX Python 3.1+ should include tkinter as part of the distribution (cannot vouch for that though). If it doesnt, installing latest distribution of Python should install it.
  2. Follow the following tutorial if the above fails: https://tkdocs.com/tutorial/install.html
  3. Run command python -m pip install --upgrade pip setuptools wheel (to update wheel projects)
  4. Run command sudo pip install pyyaml, if this doesnt work try sudo pip3 install pyyaml. If that doesnt work, I'm sure google has another way.
  5. Do the same as 4 for the following packages:
     - pygame
     - requests
     - beautifulsoup4
     - lxml
  6. Run command on terminal: make run 
        this will attempt both python and python3 command, so ignore command not found error if it appears for one or the other
  7. If make doesnt work, type python3 || python PyDrink.py
  8. This application uses an external API running on cis4450.socs.uoguelph.ca server. If it doesnt work for some
        reason (If the inventory page is empty), make sure you are connected with Cisco AnyConnect, if it still
        doesn't work, please see README in lcbo-api folder to set up the API locally.
        Once the API is running locally. Go to data/ folder and edit
        config.yml: host: localhost (or 127.0.0.1) and port:3000
 
Windows
  1. This software requires TKinter. If the program doesn't start correctly
        with below step please visit https://www.activestate.com/products/activetcl/downloads/
        to install ActiveTcl which adds Tkinter to Python distribution (make sure you install 8.5+,
        not 8.4 or lower)
  2. Follow the following tutorial if the above fails: https://tkdocs.com/tutorial/install.html
  3. Run command python -m pip install --upgrade pip setuptools wheel (to update wheel projects)
  4. Run command pip install pyyaml, if this doesnt work try pip3 install pyyaml. If that doesnt work, I'm sure google has another way.
  5. Do the same as 4 for the following packages:
     - pygame
     - requests
     - beautifulsoup4
     - lxml
  6. Run command on terminal: make run 
        this will attempt both python and python3 command, so ignore command not found error if it appears for one or the other
  7. If make doesnt exist install MinGW: https://osdn.net/projects/mingw/downloads/68260/mingw-get-setup.exe/
        The above step installs the manager, then select mingw32-make-bin package and install it. Go to the install directory and copy the
        file mingw32-make.exe calling it make.exe. Then add the directory to make to your path variable (system environment variables)
        Restart your terminal and you should now be able to run command 'make run'
  8. If make still doesnt work, type python3 || python PyDrink.py
  9. This application uses an external API running on cis4450.socs.uoguelph.ca server. If it doesnt work for some
        reason (If the inventory page is empty), make sure you are connected with Cisco AnyConnect, if it still
        doesn't work, please see README in lcbo-api folder to set up the API locally.
        Once the API is running locally. Go to data/ folder and edit
        config.yml: host: localhost (or 127.0.0.1) and port:3000


##Explanation of All Classes##
    Models:
        src/DrinkStorage: List of Drinks, required methods for child classes
        src/Fridge: Implementation of DrinkStorage required methods
        src/Glass: Implementation of DrinkStorage required methods
        src/Inventory: Implementation of DrinkStorage required methods + Parses API data + Parses mock data
        src/Drink: Base drink class which all drinks inherit from. Attributes: ID, Name, Cost, Description
        src/Alcoholic: Child class of Drink. Attributes: APV (alcohol per volume), Package, Category
        src/NonAlcoholic: Child class of drink. Attributes: Carbonation (True, False), Sugar Content, Package, Caffeine Content
        src/Translate: Microsoft Translate Text SOAP API handler. Attributes: languages, key (Authorization), token, Speech Number (Iterating through audio files)
    View: 
        PyDrink: GUI class
    Controller:
        ui/PyDrinkController: GUI event handlers + Maintains models
                        *There is one controller that handles all the models
                         since some of the event handlers require multiple models
                         in order to function properly
        src/Encoder: Encoder for the JSON format to use public variables instead of private
        ui/ROText: Custom GUI Textbox that disables common functionality to work as a READ-ONLY Text box
                (i.e. Disabled: paste, editing, deleting, Undoing, Redoing, etc.)
        ui/ScrolledTreeView: Custom GUI TreeView (the tables you see in the UI) that are scrollable
                to allow for multi-paged display with a convenient scroll bar
        ui/SearchBox: Custom GUI Searchbox taken from Tkinter's public recipes and adapted for 
                the purposes of this app.
        ui/GUI: Custom GUI Model that maintains the Tkinter view and controller.



##Known Limitations##
- Due to the sheer size of the inventory data and the way the restful API works, I only get 20 items per request.
  So as to not bog down the application, I have made every inventory page distinct. What does this mean?
  If you select a drink in the inventory page, and shuffle through the pages, the dictionary that holds the
  drink objects is cleared and new drinks are added to it. Meaning the data as to which drinks you selected don't
  persist. A way around this is to add drinks to your fridge from the inventory intermittently before changing pages
  (or making queries).
- NonAlcoholic Beverages are difficult to create without user input. Due to the complexity of this Application, I did
  not have time to include more forms for user input. Please use the mock data file found at "data/mock/nonalcoholic.csv".
  You can add or remove whatever you like in that file, however because I am using mock data I did not want to
  be able to delete Non Alcoholic beverages through the application with mock data due to the effort required to add
  and remove non alcoholic beverages. Thus, when removing a non alcoholic drink from the fridge in the app, it will
  only remove the drink from the current session. When reopening the application, the original mock data will show up
  again. Simple to fix, but for testing and usability purposes I did not.
- Microsoft Text Translator API is limited in the number of "character conversions" per month. So please use the functionality
  sparingly. This API is meant to be a proof of concept, so keep it to small number of translations and text-to-speech calls.
  
  
------------------------------------------------------------------------------------------------------------------------
    1   |   General OO
        |
        |   Controller + Model + View Design
        |
        |   - ui/PyDrinkController.py                            - One controller that handles all the models was 
        |                                                          decided in my design since my controller needs
        |                                                          multiple Models to handle events properly. If
        |                                                          I split up my controllers, I would have to add 
        |                                                          coupling between controllers and split handling
        |                                                          an event in multiple controllers which is more 
        |                                                          than having the 3 models handled in the one controller.
        |                                                         
        |
        |   Encapsulation, Constructors, Accessors, Mutators, Instance Variables
        |
        |   - src/Inventory.py            - Lines 12 - 84       - Inventory Class added that shows encapsulation
        |                                                         by having its own private variables and 
        |                                                         mutators/accessors, and inheritance since it
        |                                                         inherits from my DrinkStorage abstract class.
        |    
        |    - src/Drink.py                 - Lines 9 - 70      - Encapsulation is everywhere in my program, but
        |                                                         here is another example that shows were I use
        |                                                         private instance variables, constructors, and 
        |                                                         mutators/accessors.
        |
        |
        |    Code Reuse
        |
        |    - ui/PyDrinkController.py      - Lines 296 - 311   - Method insert_manager_tree() shows code reuse,
        |                                                         since multiple events call this method to handle
        |                                                         similar tasks with different models. This allows
        |                                                         me to load data into tree views with different models.
        |
        |
        |    Polymorphism
        |
        |    - src/Inventory.py            - Line 134 (Alcoholic)  - I am currently maintaining a dictionary of Drinks
        |    - src/Fridge.py               - Lines 66-68             in the DrinkStorage class, however I am adding Alcoholic and NonAlcoholic
        |                                                            drinks to it. This is where polymorphism plays a part in my project.
        |
        |
        |   Class Hierarchies and Method Overriding
        |
        |   - src/Drink.py                - Line 123            - src/Alcoholic.py and src/NonAlcoholic.py depend
        |   - src/Alcoholic.py            - Line 55               on src/Drinks.py and override the __str__  
        |   - src/NonAlcoholic.py         - Line 66               method to print according to their attributes.
        |                                                         
        |   - src/DrinkStorage.py         - Line 23             - Similar to the __str__ method above, the parse method
        |   - src/Fridge.py               - Line 38               in src/DrinkStorage.py is overridden to accommodate the
        |   - src/Glass.py                - Line 34               differences between src/Fridge.py, src/Glass.py and
        |   - src/Inventory.py            - Line 97               src/Inventory.py
        |
        |
        |    Class Relationships: Abstract DrinkStorage Class -> Fridge, Glass, and Inventory classes, Drink class -> NonAlcoholic and Alcoholic classes
        |
        |   - src/DrinkStorage.py         - Line 7              - This is an abstract class that contains
        |                                                         behaviours and attributes common to 
        |                                                         src/Inventory.py, src/Glass.py and
        |                                                          src/Fridge.py
        |
        |   - src/Drink.py                - Line 6              - This is an parent class that contains
        |                                                         behaviours and attributes common to 
        |                                                         src/Alcoholic.py and src/NonAlcoholic.py
		|
		|    SOAP and REST
		|	 
		|	- src/Inventory.py            - Entire class        - This class handles REST requests and responses from
        |                                                         the LCBO API, makes special queries to get product
        |                                                         information from the LCBO store.
        |
        |   - src/Translate.py            - Entire class        - This class handles SOAP requests and responses from
        |                                                         the Microsoft Translator API to translate text
        |                                                         to and from specific languages, as well as convert
        |                                                         text to speech.																  
        |
  ------------------------------------------------------------------------------------------------------------------------
    2   |   OO Showcase - src/Glass.py
        |
        |    Exception Handling + Encapsulation (ish)
        |     
        |   - Lines 56 - 65,      - Exception handling implemented in parsing to handle wrong mock file input while hiding
        |           34 - 49,        information about what went wrong and dealing with it at the source rather than
        |                           letting it propagate up the call stack. The data file used (cocktail.csv) is missing
        |                           fields and information and parsing it like a normal csv file doesn't work. A function
        |                           was written (parse_row) to take each csv row of fields and attempt to extract the
        |                           information. Originally this was done field by field (try catch for each
        |                           field), but thought it was a lot of duplicate code, so it was made into a function
        |                           that could handle it more modular way.
        |
        |    Facade Design Pattern (Entire File)
        |    - This class is very similar in its design to a typical Facade Design pattern in that the Glass class is
        |      a unified interface that uses sub-systems, in this case the Cocktail class and the DrinkStorage class, to
        |      provide meaningful information to other interfaces. The Glass class has a collection of Cocktails
        |      and a collection of drinks which are used in the find_cocktail method (line 78) to generate meaningful
        |      information to the controller as well as the view (other methods exist as well for handling and maintaining
        |      cocktails). In the future this can be extended to provide meaningful statistics information about what a
        |      user typically drinks and possibly other sub-components to provide the user with purposeful data.
        |    - Worded differently, the Glass class offers its clients (the controller, view, or future models) a single,
        |      simple interface to the Glass subsystem (Cocktails and Drinks) by gluing together the classes that implement
        |      the parsing and processing of user information (what they want to drink) without completely hiding them.
        |      This provides meaningful data from a simple interface rather than from complex subsystems that will only
        |      get more complex as they evolve. The facade provides a simple default view of the subsystems that is good
        |      enough for most functionality, where only controllers that need more customizability will look beyond.
        |      Benefits:
        |      - Shields controller from subsystem components reducing the number of models the controller deals with
        |        and makes the subsystem easier to use.
        |      - Reduces coupling between controller and subsystem which allows for varying the components of the subsystem
        |        without affecting the controller using the facade.
        |      - Important to note that it doesnt prevent the controller from using the subsystem classes if it wants but
        |        allows for choice between ease of use and generality.
        |
---------------------------------------------------------------------------------------------------------------------
    3   |   Rest/SOAP compare contrast
        |
        |   Origins:
        |    - REST was created in 2000 by Roy Fielding in UC Irvine with the purpose of creating a protocol that embraces
        |      the philosophy of an open Web.
        |    - SOAP was created in 1998 by Dave Winer et al in collaboration with Microsoft, with the purpose of addressing
        |      the needs of the enterprise market.
        |    
        |    Concept:
        |    - REST makes data available as resources.
        |    - SOAP makes data available as services.
        |    
        |    Encapsulation + Error Handling:
        |    - An API is an interface between more than one pieces of software that allows data transfer to perform tasks. It
        |      allows information sharing without exposing an entire system (Encapsulation)
        |      
        |      For example, the LCBO API I use gathers a large collection of information from LCBO about different
        |      drinks, processes the data, and provides only important information to the clients of the API. It
        |      hides irrelevant information and also information that shouldn't be public like authentication keys,
        |      and other pieces of information that isn't relevant to a specific resource (if I'm getting product data,
        |      I shouldn't be receiving inventory data).
        |      
        |      Both REST and SOAP provide Object-like structures in formats such as JSON, XML, HTML, and YAML (SOAP only
        |      uses XML). This ties in with Object Oriented programming since both SOAP/REST and OO use 
        |      structures to communicate and share information without exposing implementation details, and rely on
        |      attributes and methods to do so. 
        |      
        |    - From an architectural standpoint, an author of an OO program is tasked with designing software that
        |      adheres to concepts like high cohesion and low coupling, Modularity, and code reuse.
        |      The same applies to SOAP and REST. An API designer needs to keep all the above concepts in mind when
        |      designing an API in order to create something maintainable and reusable.
        |      
        |      For example, the LCBO API I use in src/Inventory.py Lines 139-153 is flexible in that it can take
        |      any number of parameters in the resource request to customize my queries. This way I can search
        |      for pages of information or even provide queries for specific words I'm looking for in products.
        |      This flexibility allows for more code reuse and modularity which plays to the strengths of OO.
        |      
        |    
        |    - They both conceptually use Contract by Design, and because of this both are able to handle incorrect
        |      input very well. SOAP has built in exception handling which allows for exceptions to be caught at
        |      the source rather than propagate up the call stack, and REST uses HTTP status codes (so does SOAP)
        |      to convey that something has gone wrong.
        |      It is generally understood that exception handling is better than a simple status code since:
        |      1. Exceptions leave your code clean of necessary checks of status returns on every call.
        |      2. Exceptions can carry more information than a status return
        |      3. Exceptions cannot be ignored through inaction, while status codes can.
        |      So from this standpoint, SOAP has a leg up, but regardless of the exception the SOAP response
        |      can return, the status codes (if using HTTP) should be evaluated regardless. In regards to
        |      #2 above, REST can still return information with most status codes (some exceptions like 204)
        |      so with all this being said, both REST and SOAP handle errors pretty well and in different ways.
        |      Depending on the use case, one might be preferred over the other.
        |      
        |      For example in src/PyDrinkController.py Line 433, you'll notice the call to translate text with 
        |      the SOAP API is surrounded by try catch blocks since the error handling done with SOAP can cause
        |      my application to crash if I don't handle the error that is returned properly. 
        |      This for me was a good thing because it forced me to handle the cases where text couldn't be 
        |      translated instead of trying to figure out if the return was successful or not like I would 
        |      do in REST. This makes the API itself, and my use of it more maintainable and helped me 
        |      in my OO design in terms of encapsulation and extensibility when translating text.
        |
        |    Performance
        |    - Due to the flexibility of REST, many different formats can be used to send messages, 
        |      plaintext, HTML, XML, JSON, YAML are some of them, and because REST can use 
        |      some of these simple data formats (XML not being one of them) performance is generally better
        |      since there is little overhead.
        |    - SOAP requires the use of XML, and the cost that comes with it. XML is known to be more computationally
        |      expensive to format and parse, and due to the requirements of SOAP objects being encoded with an
        |      envelope, body, and optional header and fault (for error handling) there is a much higher overhead
        |      cost.
        |      
        |    Security
        |    - In security there are 3 fundamental requirements, Confidentiality, Integrity, and Authenticity 
		|      (CIA; Coincidence? I think not).
        |    - SOAP has built-in support for WS-Security which is a protocol specifying how integrity and confidentiality
        |      can be enforced on messages and allows the communication of various security token formats.
        |    - Both SOAP and REST are able to perform Authenticity through Non-repudiation by writing transactions
        |      to electronic journals or audit trails that are subject to security safeguards. WS-Security also provides
        |      Digital Signatures which is a more direct and verifiable non-repudiation proof used for Authenticity.
        |      
        |    - Due to RESTs lack of ability to provide Integrity and Confidentiality however, SOAP provides
        |      a secure communication that cannot be afforded by REST, rather REST relies on the programmer to add
        |      security features on top of the REST implementation.
        |      
        |    
        |    With all of the above in mind, the constraints of REST and SOAP are listed below:
        |      
        |    Constraints of REST:
        |    - Uniform interface
        |    - Stateless
        |    - Cacheable
        |    - Client-Server
        |    - Layered System
        |    
        |    Constraints of SOAP:
        |    - Stateful
        |    - Client-Server
        |    - Requires use of
        |        Standard SOAP libraries
        |        XML Payloads
        |        Adherence to SOAP standards
        |    
        |    They both employ OO practices such as Encapsulation, Code Reuse, Maintainability, Cohesion, and
        |    coupling, with SOAPs added benefit of Exception Handling. One isn't necessarily better than the other,
        |    rather they are inherently different, but because of this each apply to different use cases.
        |
        |    Sources:
        |    https://nordicapis.com/rest-vs-soap-nordic-apis-infographic-comparison/?fbclid=IwAR33VFaDALsAV7ftTIW2yxjZZIB0BpyRJK61DHSkKCp5YSPZA4ChmMBJRF4
        |    https://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation.pdf
        |    https://www.mulesoft.com/resources/api/what-is-an-api
        |    https://raygun.com/blog/soap-vs-rest-vs-json/
        |    https://www.restapitutorial.com/lessons/whatisrest.html
        |    https://www.quora.com/What-are-RESTful-APIs-and-how-do-they-work
        |    https://en.wikipedia.org/wiki/WS-Security
        |    https://stackoverflow.com/questions/4670987/why-is-it-better-to-throw-an-exception-rather-than-return-an-error-code#4671023
        |    https://nordicapis.com/defining-stateful-vs-stateless-web-services/
        |    https://www.openqm-zumasys.com/wp-content/uploads/2015/02/International-Spectrum-2014-Object-Oriented-Programming-and-Exception-Handling.pdf
        |    Professor Judi McCuaig
        |   
------------------------------------------------------------------------------------------------------------------------

##Sources:##
- https://krzysztofzuraw.com/blog/2016/makefiles-in-python-projects.html
- http://net-informations.com/python/iq/interfaces.htm
- http://page.sourceforge.net/
- http://code.activestate.com/recipes/580773-tkinter-search-box/



##Clarifications Based on Peer Review##
R: The distinction between cocktail and drink is a bit fuzzy. I get that a cocktail has a drink and a glass. However, if I ever had to use your code and just had a look at the class names. I would assume cocktail is a drink.
A: A Cocktail is made up of many drinks. While there is no list of drinks in my cocktail class, it has categories of drinks that must be satisfied. A Glass is where you make your cocktail. You add drinks to your glass in order to
   make the cocktail.
   
R: For some reason, the glass tab does not show any of the drinks selected.
A: To add selected drinks to the glass tab, please select a drink in the fridge with a left click, and right click it afterwards to add it to your Glass.
   This was done so that the user has a distinction between selecting a drink in the fridge (to see its description) and  adding the drink to their glass (by right clicking a selected drink) for making a cocktail. 
   
R: The persistence makes sense, but for some reason, after removing the clamato, orange juice and tonic from my fridge, they reappear every time I open the program.
A: Yes great observation! Since my app is using mock data for the non alcoholic beverages, I am loading in the information when the application starts up. Hence removing a non alcoholic beverage
   from the fridge during runtime affects only the currently running application. If you would like to remove a non alcoholic beverage all together, feel free to update the mock data located at
   data/mock/nonalcoholic.csv