************************
Program Description:

An Drink Manager that monitors the
drinks you have and helps you find
cocktails you can make with it.
NOTE: For this assignment all data is
mocked, Inventory is disabled,
will be introduced in A2, will allow
you to add drinks your fridge based
on what is available at LCBO.
All is performed in a GUI:

Fridge Tab:
Single click on a drink - shows description
Double click on a drink - Selects the drink
Pressing 'Add to Glass' button - Adds all selected
drinks to glass tab

Glass Tab:
Shows all drinks you've selected
Single click on any cocktail - shows whats required for
making the cocktail choosen

NOTE: Here are some cocktails for you
to try to make using the app:

Gin and Tonic:
Dillion's Unfiltered (Gin)
Tonic

Manhattan:
Martini's Vermouth (Sweet Vermouth)
Buffalo Trace (Bourbon Whiskey)

Try something else out, maybe you'll find
other cocktails you never knew existed!
**************************

*************************************
User Guide - !!REQUIRES Python 3.7! Check which version you have
with the following command 'python --version' or 'python3 --version' if you don't have it
please install: https://www.python.org/downloads/release/python-372/!

Which ever --version command gives you 3.7 (python or python3, please use that
command for the rest of the setup instructions)

1. This software requires TKinter. If the program doesn't start correctly
   with below step please visit https://www.activestate.com/products/activetcl/downloads/
   to install ActiveTcl which adds Tkinter to Python distribution (make sure you install 8.5+,
   not 8.4 or lower)
1a. on linux, installing python-tk package or python3-tk package should do the trick
	(sudo apt-get install python3-tk) 
1b. on MacOSX Python 3.1+ should include tkinter as part of the distribution (cannot vouch for that though)
1c. Follow this tutorial if all above fails: https://tkdocs.com/tutorial/install.html
2.  Run command on terminal: make run 
	*NOTE this will attempt to clean and rebuild all bytecode so if none found disregard the error message
	 ALSO this will attempt both python and python3 command, so ignore command not found error if it appears for one or the other
2a. If make doesnt exist and on Windows OS install MinGW: https://osdn.net/projects/mingw/downloads/68260/mingw-get-setup.exe/
2b. The above step installs the manager, then select mingw32-make-bin package and install it. Go to the install directory and copy the
	file mingw32-make.exe calling it make.exe. Then add the directory to make to your path variable (system environment variables)
	Restart your terminal and you should now be able to run command 'make run'
3.  If make still doesnt work, tpye python3 || python PyDrink.py


*************************************
Known Limitations, Assumptions and Errors
NOTE: The following error will occur periodically
when closing the application. It has nothing to do
with the software I wrote. It is a known bug so do not
be alarmed
in Tkinter:

	Exception ignored in: <function Image.__del__ at 0x00000250903E48C8>
	Traceback (most recent call last):
		File "...\Python\Python37\lib\tkinter\__init__.py", line 3508, in __del__
	TypeError: catching classes that do not inherit from BaseException is not allowed
	Exception ignored in: <function Image.__del__ at 0x00000250903E48C8>
	Traceback (most recent call last):
		File "...\Python\Python37\lib\tkinter\__init__.py", line 3508, in __del__
	TypeError: catching classes that do not inherit from BaseException is not allowed
	Exception ignored in: <function Image.__del__ at 0x00000250903E48C8>
	Traceback (most recent call last):
		File "...\Python\Python37\lib\tkinter\__init__.py", line 3508, in __del__
	TypeError: catching classes that do not inherit from BaseException is not allowed
	
	
	

*************************************

*************************************
Coding Style
- Class names use PascalCase
- Private variables use a _ prepending
the variable name
- Variable and method names are 
written 'like_this' all lowercase
according to PEP8 standards
*************************************

**********************************************************************************************
Learning Outcomes:
Design and implement classes for an object-oriented program demonstrating correct use of encapsulation, 
constructors, method overloading, class invariants, accessors, mutators, instance variables and class variables.
	- Class Drink is parent class of Alcoholic and NonAlcoholic. All 3 of these have accessors and mutators (called properties in Python)
	- Class Manager is abstract class that implements common functionality in Glass and Fridge, but also contains stubs for unique methods
	  overwritten in class Fridge and Glass. All of these classes have accessors and mutators.
	  Fridge and Glass classes override the methods in Manager. There was no clear need for method overloading for this assignment
	  however, so it wasn't used. In the next assignment when introducing the Inventory API I might have to introduce overloading
	  for different categories of drinks which might have different information (i.e. wine has VQA information that a rum won't have)
	- The Cocktail class (written in Glass.py maintains all cocktail attributes that are handled and stored in the glass class in a dictionary
      of all cocktails (used by other classes to search parsed cocktails)
	- Most child classes (i.e. NonAlcoholic, Alcoholic) have instance variables pertaining to specific information about each
	  type of object (name, id, main alcohol, garnishes, etc)
	- All classes have constructors
	- There is no explicit private or public or even protected type in python, but there is a standard for denoting one or the other.
	  all private types have an underscore at the start of the name (i.e. _name, _id) and all objects with a dunder (__) are protocols (i.e. __str__ in
	  Cocktail, Drink, Alcoholic, and NonAlcoholic classes) but there is no standard for protected type and so you won't see any in my code. If
	  there was most of my drink attributes I would have reviewed as to whether keep them as private or make them protected instead.
	- In my program the only invariant would be the types for the properties in each class. Because all my information will be taken from an API (currently mocked in
	  data folder) their values are not constrained. In fact most values are strings, and the ones that aren't, are unique from the API.
	  I could check for types however that wouldn't be very Pythonic due to Python's duck typing core ideology.

Construct class hierarchies that maximize code reuse through inheritance while accommodating differences through method overriding.
	- I used class heirarchies to minimize code reuse between Drink -> Non Alcoholic and Alcoholic types as well as Manager -> Glass and Fridge. 
	  These heirarchies types share similar data, and so to limit reuse I created the Drink and Manager class to maintain shared information. 
	  The Drink string protocol is overridden by Alcoholic and NonAlcoholic class to return more relevant information for each class and their specific attributes.

Use polymorphism, abstract methods/classes, and interfaces effectively to produce generic code.
	- I am currently maintaining a dictionary of Drinks in the Manager class, however I am adding Alcoholic and NonAlcoholic
	  drinks to it. This is where polymorphism plays a part in my project.
	- My Manager class is abstract, and this was done to differentiate between the 2 types of 'Managers' I maintain, Fridge and Glass
	  which are inherintly different. However in the following assignment I will be adding another called Inventory which will be updated
	  by the LCBO API and so method overriding and the abstract class will play a larger role there.
	- "Interfaces are not necessary in Python. This is because Python has proper multiple inheritance, and also ducktyping, 
	   which means that the places where you must have interfaces in Java, you don't have to have them in Python. ... 
	   Some of them [properties of interfaces] are covered by Pythons Abstract Base Classes, introduced in Python 2.6. 
	   They are useful, if you want to make base classes that cannot be instantiated, but provide a specific interface or part of an implementation." - Lennart Regebro (Stack Overflow)
	   - To elaborate, in my application there is no clear interfaces, but my Abstract class is implemented in a fashion similar to an interface
		 where there is only static variables whereas an Abstract class can maintain non static variables. Also there are only method signatures in
		 my abstract class rather than any implementation. What makes my abstract class abstract rather than just an interface is that I also am
		 implementing a non-static method 'drinks' to return the static dictionary of drinks.
	   - Please see interface source below for more information on Interfaces in Python
	

Use event-driven programming to create a usable, effective graphical user interface.
	- My GUI currently uses lambda functions in PyDrink.py (i.e. line 189) to call event handlers in PyDrink_support.py
	  which will handle specific events like changing tabs, clicking buttons, selecting elements in the TreeViews and
	  and double clicking on the elements too.
	  
	  
Encapsulation: i.e. Drink.py line 8-58
Overriding Methods: Drink.py line 60-61, NonAlcoholic.py line 57-61, Alcoholic.py line 45-47
Class Relationships: Abstract Manager Class -> Fridge and Glass classes, Drink class -> NonAlcoholic and Alcoholic classes
	Manager: List of Drinks, required methods for child classes
	Fridge: Implementation of Manager required methods
	Glass: Implementation of Manager required methods
	Drink: Base drink class which all drinks inherit from. Attributes: ID, Name, Cost, Description
	Alcoholic: Child class of Drink. Attributes: APV (alcohol per volume), Package, Category
	NonAlcoholic: Child class of drink. Attributes: Carbonation (True, False), Sugar Content, Package, Caffeine Content
Polymorphism: List of Drinks in Manager class (line 10) holds all drink types (Alcoholic and Non Alcoholic)
GUI: PyDrink.py is the view, PyDrink_support.py is the Controller for the program since it contains
    the eventhandlers which utilize the Models created (Fridge and Glass) in the file (line 29-30)
Event Driven Programming: There are event handlers all over the PyDrink.py file and some
	in the PyDrink_support.py file that are created dynamically for GUI objects that are
	created on the fly. (i.e. PyDrink.py line 194, 261, etc; PyDrink_support.py line 175-176, 188)
**********************************************************************************************

**********************************************************************************************
User Stories Yet to be Implemented:

The user can access the Inventory of all LCBO products
The user can select LCBO products and add it to their 'fridge'
The user will get specific information depending on category of drink selected (i.e. Wine will
	provide VQA information)
**********************************************************************************************

**********************************
Sources:

- https://krzysztofzuraw.com/blog/2016/makefiles-in-python-projects.html
- http://net-informations.com/python/iq/interfaces.htm
- http://page.sourceforge.net/

**********************************

****************************************************************************************************************
Clarification based of Peer Review: (R- Review) (A - Answer)

R: The distinction between cocktail and drink is a bit fuzzy[-1]. I get that a cocktail has a drink and a glass. However, if I ever had to use your code] and just had a look at the class names. I would assume cocktail is a drink.
A: A Cocktail is made up of many drinks. While there is no list of drinks in my cocktail class, it has categories of drinks that must be satisfied. A Glass is where you make your cocktail. You add drinks to your glass in order to
   make the cocktail.
   
   
   
R: For some reason, the glass tab does not show any of the drinks selected.
A: To add selected drinks to the glass tab, please press add to glass button. This was done so that the user has a distinction between selecting a drink in the inventory (to see its description) and 
   adding the drink to their glass (by pressing a button) for making a cocktail. If more people are confused by this, I could remove the button altogether and make it so if you selected a drink
   its added to the glass tab immediately.
   
   
   
R: Though the instructions in the readme were written well and cover all the bases, it didn't take me more than 10 seconsd to get the program up and running without even needing to use them. 
   Coding style is consistent, however I would suggest consolidating a bit of the code - I'm pretty sure that the main file doesn't need to be 500 lines with a few other files to support 
   the program. This should really be split up into separate folders to make it more understandable (-1). 
   In addition, there are bits of code commented out sporadically throughout the files, and I'm not sure why. File/folder names/structures are both reasonable and easy to understand.
 
   When run, the actions available to me are not as intuitive as they should be. Firstly, the system's tabs at the top do not have visible text on Linux environments - this is a problem,
   sicne the assignment outline said that it needed to run on Linux. I tested the program on both my native Fedora install and the NoMachine servers, both didn't show the text.
   Fortunately, my Mac was able to render the tabs and I was able to see the titles that were supposed to be there. (-1)

   In addition, it is unclear what the purpose of the program is. I can tell (by looking through code) its supposed to be some kind of cocktail suggestion application that bases its suggestions 
   off an inventory in your fridge or such. However, the inventory tab is disabled, and the tab for suggestions doesn't show any useful information as such. The only real use I can tell for the
   program is to look at a few types of alcohols and see their descriptions and details about them (-1)
   
A: I'm glad the program worked right off the bad without needing to read the README, though I believe had you read it, you would have understood the program more clearly, and understand how to use it
   and why the inventory tab is disabled (for A2 implementation). You are right the main GUI file is large and requires a support file. The support file handles the event handling and the main file
   handles the objects in the GUI and making action listeners. The one big file could be split up, however I think by splitting it up it would only make it more confusing. The GUI file PyDrink is
   big because of the amount of objects it creates and adds to the screen as well as custom objects tailored specifically for the app. Commented Out Code will be removed. I missed this, thank you.
   
   I'm not sure what the tab issue is. I tried it on MacOS, NoMachine, Debian, CentOs, Kali Linux, Windows 7, and Windows 10.
   
   I should have provided example test cases to see the cocktails in action for those who don't know any cocktails or what goes into them. Updated the README to make it more user inclusive.
   
   
   
R: I'm also not really sure what the use is for the ROText class, since tkinter includes a way to disable a text box from being written to without defining a class and methods (again, not encapsulated properly. -1). 

   Duplicate code is everywhere in the GUI section of the assignment. Namely, there are many instances of the call to the configure() method on the same instance, sometimes even ten lines in a row of the same 
   obj.configure(<something>) call. This wouldn't really be an issue if you couldn't use multiple arguments in this method, but you can, so there is no reason to waste so many lines when one call such as 
   obj.configure(<something>, <something_else>) would have sufficed. This makes the code long for no good reason. (-1)

A: ROText class is for read only textboxes. Not disabling them. There is only a way to fully disable, but then I can't write or update to them once disabled. So Read-only allows me to update the values dynamically in
   the application, but does not let the user change, update, focus, or copy/paste. 
   
   The multople calls to the configure were done on purpose for my own readablity. I find it hard to understand what the GUI is doing at times (in terms of the object locations and styles) bc I'm not super versed in GUI
   implementation. Hence I seperated the configure lines into seperate lines so that I can understand it better. The number of lines of code doesnt matter. Its what they do and how understandable they are that does.
   
   Please keep in mind, this assignment is not a GUI assignment. I used template code from the PAGE GUI maker (check sources) to help me make the GUI objects, The event handlers were written by me. So look for OOP
   methodologies in my classes rather than my GUI.