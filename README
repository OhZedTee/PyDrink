##Overview##
This is a Drink Manager App that monitors the drinks you have and helps you find
cocktails you can make with it.

For this assignment all data (except NonAlcoholic Mock data) is coming from the LCBO API running on the cis4450.socs.uoguelph.ca server.
Please make sure you are connected to the school VPN before running this application.

Non Alcoholic Beverages are mocked in data/mock/nonalcoholic.csv. Feel free to add your own to the mock data to use
in making drinks. These Non Alcoholic drinks will appear straight in your fridge (not in the inventory) and can not
be removed permanetly without removing them from nonalcoholic.csv. You can remove them for a session, but the next
time you open the app, they will be there.

The inventory is where the API is connected and allows you to view the LCBO products. You can search based off any parameter and can
add multiple parameters together:
i.e. "Yellow", "Apple", "Vodka",
     "Red Wine", etc...

To add a drink from your inventory to your fridge, you need to select a drink with a left click and then
right click the drink to add it to your cart. At that point pressing the Add To Fridge Button will add
any drink in your cart to your Fridge.

The same UI principles are in effect in the Fridge Tab, Except no need for an Add To Glass Button. 
Select the drinks you might want to make a cocktail from and they will appear in the glass tab.

In the Glass tab, you can see what drinks are selected (however you cant click on them) and the cocktails you
can make. Left clicking on the cocktails will show you how to make each cocktail.

Note* Due to the nature of the data I am working with there is a chance that the cocktails available are not accurate
to the types of drinks you have added. I have tried to mitigate this as much as possible but there are limitations to what I can do
with the bad data I have managed to find for free.

TLDR:
Inventory Tab:
Left click on a drink - shows description and selects drink
Right click on a drink that is selected - Adds drink to cart
Pressing 'Add To Fridge' button - Adds all drinks
in the cart to the fridge tab.

Glass Tab:
Shows all drinks you've selected in the fridge tab
Single click on any cocktail - shows whats required for
making the cocktail chosen

HERE ARE SOME COCKTAILS TO TRY MAKING:

Gin and Tonic:
Dillion's Unfiltered (Gin)
Tonic

Manhattan:
Martini's Vermouth (Sweet Vermouth)
Buffalo Trace (Bourbon Whiskey)

Try something else out, maybe you'll find
other cocktails you never knew existed!



##User Stories:##
1. As a user I want to be able to select from a slew of drinks that I may have at home so
   that I can add them to my fridge and use them for cocktails
2. As a user I want to be able to get specific information about any drink I have at home
   so that I can make informed decisions about what I consume and the cost of consuming
3. As a user I want to be able to store the information from my fridge so that I can
   reload all the information back on application startup
4. As a user I want to be able to see cocktails that can be made only from the
   Drinks I've selected so that I'm not required to buy anything else to make
   them (other than garnishes). (In A1, it was any drink selected is enough for a cocktail,
   i.e. if I select just Vodka, I can make Sex on the Beach which requires Vodka and Peach Schnapps,
   now it needs every requirement for a drink to be made, harder to implement than it sounds with my bad data)
5. As a system administrator I want to be able to see JSON data about each Drink as part of
   the description so that I can display it on the web (will be used in A3)

All of the user stories have been implemented in the application.



##Requirements:##
  Python 3.7.2 (not negotiable, modules required from 3.7, so 3.5 is not enough unless you are able to get around some module dependencies)
    Check which version you have
    with the following command 'python --version' or 'python3 --version' if you don't have it
    please install: https://www.python.org/downloads/release/python-372/
  tkinter
  PyYaml
  ABC (Abstract Base Class, requires Python 3.x, if the program complains about this, its because you aren't using Python 3.x)

  

##Instructions for Running:##

Which ever --version command gives you 3.7 ('python' or 'python3', please use that
command for the rest of the setup instructions)

TOADD: pip install pyyaml, pip install pygame, pip install requests, pip install beautifulsoup4

Linux
  1. On linux, installing python-tk package or python3-tk package should do the trick
    (sudo apt-get install python3-tk) 
  2. Follow the following tutorial if the above fails: https://tkdocs.com/tutorial/install.html
  3. Run command python -m pip install --upgrade pip setuptools wheel (to update wheel projects)
  4. Run command sudo pip install pyyaml, if this doesnt work try sudo pip3 install pyyaml. If that doesnt work, I'm sure google has another way.
  5. Run command on terminal: make run 
        this will attempt both python and python3 command, so ignore command not found error if it appears for one or the other
  6. If make doesnt work, type python3 || python PyDrink.py
  7. This application uses an external API running on cis4450.socs.uoguelph.ca server. If it doesnt work for some
        reason (If the inventory page is empty), make sure you are connected with Cisco AnyConnect, if it still
        doesn't work, please see README in lcbo-api folder to set up the API locally.
        Once the API is running locally. Go to data/ folder and edit
        config.yml: host: localhost (or 127.0.0.1) and port:3000
        
Mac
  1. On MacOSX Python 3.1+ should include tkinter as part of the distribution (cannot vouch for that though). If it doesnt, installing latest distribution of Python should install it.
  2. Follow the following tutorial if the above fails: https://tkdocs.com/tutorial/install.html
  3. Run command python -m pip install --upgrade pip setuptools wheel (to update wheel projects)
  4. Run command sudo pip install pyyaml, if this doesnt work try sudo pip3 install pyyaml. If that doesnt work, I'm sure google has another way.
  5. Run command on terminal: make run 
        this will attempt both python and python3 command, so ignore command not found error if it appears for one or the other
  6. If make doesnt work, type python3 || python PyDrink.py
  7. This application uses an external API running on cis4450.socs.uoguelph.ca server. If it doesnt work for some
        reason (If the inventory page is empty), make sure you are connected with Cisco AnyConnect, if it still
        doesn't work, please see README in lcbo-api folder to set up the API locally.
        Once the API is running locally. Go to data/ folder and edit
        config.yml: host: localhost (or 127.0.0.1) and port:3000
 
Windows
  1. This software requires TKinter. If the program doesn't start correctly
        with below step please visit https://www.activestate.com/products/activetcl/downloads/
        to install ActiveTcl which adds Tkinter to Python distribution (make sure you install 8.5+,
        not 8.4 or lower)
  2. Follow the following tutorial if the above fails: https://tkdocs.com/tutorial/install.html
  3. Run command python -m pip install --upgrade pip setuptools wheel (to update wheel projects)
  4. Run command pip install pyyaml, if this doesnt work try pip3 install pyyaml. If that doesnt work, I'm sure google has another way.
  5. Run command on terminal: make run 
        this will attempt both python and python3 command, so ignore command not found error if it appears for one or the other
  6. If make doesnt exist install MinGW: https://osdn.net/projects/mingw/downloads/68260/mingw-get-setup.exe/
        The above step installs the manager, then select mingw32-make-bin package and install it. Go to the install directory and copy the
        file mingw32-make.exe calling it make.exe. Then add the directory to make to your path variable (system environment variables)
        Restart your terminal and you should now be able to run command 'make run'
  7. If make still doesnt work, type python3 || python PyDrink.py
  8. This application uses an external API running on cis4450.socs.uoguelph.ca server. If it doesnt work for some
        reason (If the inventory page is empty), make sure you are connected with Cisco AnyConnect, if it still
        doesn't work, please see README in lcbo-api folder to set up the API locally.
        Once the API is running locally. Go to data/ folder and edit
        config.yml: host: localhost (or 127.0.0.1) and port:3000


##Explanation of All Classes##
    Models:
        src/Manager: List of Drinks, required methods for child classes
        src/Fridge: Implementation of Manager required methods
        src/Glass: Implementation of Manager required methods
        src/Inventory: Implementation of Manager required methods + Parses API data + Parses mock data
        src/Drink: Base drink class which all drinks inherit from. Attributes: ID, Name, Cost, Description
        src/Alcoholic: Child class of Drink. Attributes: APV (alcohol per volume), Package, Category
        src/NonAlcoholic: Child class of drink. Attributes: Carbonation (True, False), Sugar Content, Package, Caffeine Content
    View: 
        PyDrink: GUI class
    Controller:
        ui/PyDrinkController: GUI event handlers + Maintains models
                        *There is one controller that handles all the models
                         since some of the event handlers require multiple models
                         in order to function properly
    src/Encoder: Encoder for the JSON format to use public variables instead of private
    ui/ROText: Custom GUI Textbox that disables common functionality to work as a READ-ONLY Text box
               (i.e. Disabled: paste, editing, deleting, Undoing, Redoing, etc.)
    ui/ScrolledTreeView: Custom GUI TreeView (the tables you see in the UI) that are scrollable
                         to allow for multipaged display with a convenient scroll bar
    ui/SearchBox: Custom GUI Searchbox taken from Tkinter's public recipes and adapted for 
                         the purposes of this app.



##Known Limitations##
- Due to the sheer size of the inventory data and the way the restful API works, I only get 20 items per request.
  So as to not bog down the application, I have made every inventory page distinct. What does this mean?
  If you select a drink in the inventory page, and shuffle through the pages, the dictionary that holds the
  drink objects is cleared and new drinks are added to it. Meaning the data as to which drinks you selected don't
  persist. A way around this is to add drinks to your fridge from the inventory internitently before changing pages
  (or making queries).
- NonAlcoholic Beverages are difficult to create without user input. Due to the complexity of this Application, I did
  not have time to include more forms for user input. Please use the mock data file found at "data/mock/nonalcoholic.csv".
  You can add or remove whatever you like in that file, however because I am using mock data I did not want to
  be able to delete Non Alcoholic beverages through the application with mock data due to the effort required to add
  and remove non alcoholic beverages. Thus, when removing a non alcoholic drink from the fridge in the app, it will
  only remove the drink from the current session. When reopening the application, the original mock data will show up
  again. Simple to fix, but for testing and usability purposes I did not.

------------------------------------------------------------------------------------------------------------------------
    1   |   Demonstrate best practices for OO development in the language of your choice
        |
        |   Controller + Model + View Design
        |
        |   - ui/PyDrinkController.py                            - One controller that handles all the models was 
        |                                                          decided in my design since my controller needs
        |                                                          multiple Models to handle events properly. If
        |                                                          I split up my controllers, I would have to add 
        |                                                          coupling between controllers and split handling
        |                                                          an event in multiple controllers which is more 
        |                                                          than having the 3 models handled in the one controller.
        |                                                         
        |
        |   Encapsulation, Constructors, Accessors, Mutators, Instance Variables
        |
        |   - src/Inventory.py            - Lines 12 - 84       - Inventory Class added that shows encapsulation
        |                                                         by having its own private variables and 
        |                                                         mutators/accessors, and inheritance since it
        |                                                         inherits from my Manager abstract class.
        |    
        |    - src/Drink.py                 - Lines 8 - 69      - Encapsulation is everywhere in my program, but
        |                                                         here is another example that shows were I use
        |                                                         private instance variables, constructors, and 
        |                                                         mutators/accessors.
        |
        |
        |    Code Reuse
        |
        |    - ui/PyDrinkController.py      - Lines 271 - 287   - Method insert_manager_tree() shows code reuse, 
        |                                                         since multiple events call this method to handle
        |                                                         similar tasks with different models. This allows
        |                                                         me to load data into tree views with different models.
        |
        |
        |    Polymorphism
        |
        |    - src/Inventory.py            - Line 131 (Alcoholic)  - I am currently maintaining a dictionary of Drinks
        |    - src/Fridge.py               - Lines 58-60             in the Manager class, however I am adding Alcoholic and NonAlcoholic
        |                                                            drinks to it. This is where polymorphism plays a part in my project.
        |
        |
        |   Class Hierarchies and Method Overriding
        |
        |   - src/Drink.py                - Line 106            - src/Alcoholic.py and src/NonAlcoholic.py depend
        |   - src/Alcoholic.py            - Line 51               on src/Drinks.py and override the __str__  
        |   - src/NonAlcoholic.py         - Line 62               method to print according to their attributes.
        |                                                         
        |   - src/Manager.py              - Line 56             - Similar to the __str__ method above, the parse method
        |   - src/Fridge.py               - Line 47               in src/Manager.py is overriden to accommodate the 
        |   - src/Glass.py                - Line 34               differences between src/Fridge.py, src/Glass.py and
        |   - src/Inventory.py            - Line 93               src/Inventory.py
        |
        |
        |    Class Relationships: Abstract Manager Class -> Fridge, Glass, and Inventory classes, Drink class -> NonAlcoholic and Alcoholic classes
        |
        |   - src/Manager.py              - Line 4              - This is an abstract class that contains 
        |                                                         behaviours and attributes common to 
        |                                                         src/Inventory.py, src/Glass.py and
        |                                                          src/Fridge.py
        |
        |   - src/Drink.py                - Line 6              - This is an parent class that contains
        |                                                         behaviours and attributes common to 
        |                                                         src/Alcoholic.py and src/NonAlcoholic.py
        |
        |   
        |
  -------------------------------------------------------------------------------------------------------------------
    2   |   Utilize persistence effectively to realize a user story that could not be realized without persistence
        |
        |   - src/Fridge.py               - Line 30 + 38        - In order to persist the fridge for the user
        |                                                         I used the pickle library in Python. Whenever
        |                                                         fridge is updated by the user I serialized the entire
        |                                                         fridge object to data/fridge.bin. This allows for the
        |                                                         Fridge state to be stored and loaded on application 
        |                                                         closure and startup. See method parse() and save()
        |                                                         in the Fridge class on the lines specified respectively.
        |
        |                                                       - I chose serialization over persistant storage due to
        |                                                         its light weight capacity.
        |                                                        
        |                                                       - Furthermore a database would be to heavily coupled 
        |                                                         with my program which can be used with and without
        |                                                         the persistent storage. I am using the persistence 
        |                                                         for my Fridge object so that the state of the fridge 
        |                                                         can be stored between application use. This lightweight
        |                                                         effect makes it easier integrating web and server in 
        |                                                         the next assignment. Serialization also works because 
        |                                                         my Fridge object's functionality will not change, 
        |                                                         as its only purpose is to store Drinks from the inventory
        |                                                         and let you chose drinks for your glass - the schema 
        |
---------------------------------------------------------------------------------------------------------------------
    3   |   Facilitate the addition of portability to your program via the definition and creation of portable objects
        |
        |   - src/Drinks.py               - Line 102            - Added JSON portability to the Drink object and its 
        |   - src/Alcoholic.py            - Line 47               child classes Alcoholic and NonAlcoholic.
        |   - src/NonAlcoholic.py         - Line 58               This will allow me to easily send and receive drink 
        |                                                         objects on the web.
        |
        |                                                        - I chose JSON to parse and transmit Drink objects since
        |                                                          I am already getting JSON data from my API, so storing
        |                                                          it from JSON also helped me in displaying it by JSON. 
        |                                                          I found JSON easier to read, so to understand the large
        |                                                          sums of data I'm sending and manipulating is easier
        |                                                          with JSON. Also, in the future when I implement a web
        |                                                          server, parsing large amounts of XML data is costly and 
        |                                                          slow compared to JSON, expecially since I'm parsing tens
        |                                                          of thousands of Drink objects from JSON elements in the
        |                                                          inventory.
        |
        |                                                        - I chose to make the Drink object portable to help facilitate
        |                                                          my future use of Drinks on the web and transmitting them back
        |                                                          and forth with the server will be more easily done with
        |                                                          portable Drink objects.
        |
        |    - src/Encoder.py              - (Whole Class)       - This implements a custom JSONEncoder for the json.dumps
        |                                                          method to retrieve the public equivalent of private variables.    
        |                                                          
        |                                                        NOTE* The json strings can be found in the description on
        |                                                        each drink on the bottom. They can be copied from there.
        |                                                        Keep in mind however those boxes are Read only, so pasting, 
        |                                                        nor editting can be performed.
------------------------------------------------------------------------------------------------------------------------



##Sources:##
- https://krzysztofzuraw.com/blog/2016/makefiles-in-python-projects.html
- http://net-informations.com/python/iq/interfaces.htm
- http://page.sourceforge.net/
- http://code.activestate.com/recipes/580773-tkinter-search-box/



##Clarifications Based on Peer Review##
R: The distinction between cocktail and drink is a bit fuzzy. I get that a cocktail has a drink and a glass. However, if I ever had to use your code and just had a look at the class names. I would assume cocktail is a drink.
A: A Cocktail is made up of many drinks. While there is no list of drinks in my cocktail class, it has categories of drinks that must be satisfied. A Glass is where you make your cocktail. You add drinks to your glass in order to
   make the cocktail.
   
R: For some reason, the glass tab does not show any of the drinks selected.
A: To add selected drinks to the glass tab, please select a drink in the fridge with a left click, and right click it afterwards to add it to your Glass.
   This was done so that the user has a distinction between selecting a drink in the fridge (to see its description) and  adding the drink to their glass (by right clicking a selected drink) for making a cocktail. 
   
R: The persistence makes sense, but for some reason, after removing the clamato, orange juice and tonic from my fridge, they reappear every time I open the program.
A: Yes great observation! Since my app is using mock data for the non alcoholic beverages, I am loading in the information when the application starts up. Hence removing a non alcoholic beverage
   from the fridge during runtime affects only the currently running application. If you would like to remove a non alcoholic beverage all together, feel free to update the mock data located at
   data/mock/nonalcoholic.csv