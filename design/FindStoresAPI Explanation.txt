User Story:

As a user, I want to be able to find LCBO stores that carry a specific Alcoholic beverage 
so that if I want to go and buy it I can easily locate the nearest store to me.


##Justification for Endpoint being only 1 POST request##
The API includes one composite request that uses two included endpoints.
POST was used for all 3 since there is no need to update nor delete information from
the RESTful API. Finding information on a drink doesn't require any information
to be updated by the API it also doesn't require any deletions of information about the drink. 
Additionally, Get is not preferred since the endpoints require information from the user in 
order to orchestrate more information from other APIs and operate successfully.

The POST request performs a "search", which in and of itself is a resource, I can use the POST
verb because I am "creating" a search from the user perspective. I don't need to literally create/write 
something in a database in order to use a POST.

To clarify, these endpoints make calls to another LCBO api, so creating, updating, or deleting
store/inventory/location information isn't possible. Because of this I cannot include
UPDATE or DELETE requests (for more information see the pdf design document that explains the
inner workings of the API).

##Composite request##
A POST request is all that is needed with a body that contains a drink name.
An example Post Request will look like the following:

POST PyDrink.com/find
Headers: None
Body (JSON):
{
	"drink_name": "Smirnoff Vodka"
}

The Response will look something like this:
{
    "status":200,
    "message": Found 637 LCBO stores that carry Smirnoff Vodka.
    "result": [
        {     
             "name": "Mississauga Rd & William Pkwy",
             "address_line_1": "9445 Mississauga Rd.,",
             "city": "Brampton",
             "postal_code": "L6X0Z8",
             "telephone": "(905) 456-8145",
        },
        {          
             "name": "Main & Bay Street",
             "address_line_1": "35 First Street",
             "address_line_2": "P.O. Box 310",
             "city": "Moosonee",
             "postal_code": "P0L1Y0",
             "telephone": "(705) 336-2301",
        },
        {
             "name": "Portage Rd & Colborne E",
             "address_line_1": "3714 Portage Road",
             "city": "Niagara Falls",
             "postal_code": "L2J2K9",
             "telephone": "(905) 356-3972",
        },
        ... (more results will appear)
    ]
}

**This endpoint makes the stores request (see below) and then for
every store_ids index makes a location request (see below).
It then aggregates this data and returns the resulting information
as seen above.**

The reason I split up one endpoint into 2 smaller endpoints and
created another endpoint to compose the 2 together is to
allow for modularity. If I want to search for only
one specific store I can still do that instead of
being coupled with one endpoint which returns information
on what could be (as shown with Smirnoff Vodka, a popular Vodka brand)
a lot of stores and their location information.

##Stores request##
POST PyDrink.com/find/stores
Headers: None
Body (JSON):
{
	"drink_name": "Smirnoff Vodka"
}

The Response will look something like this:
{
    "status":200,
    "message": Found 637 LCBO stores that carry Smirnoff Vodka.
    "store_ids": [
        655,
		424,
		401,
		298,             
        ... (more results will appear)
    ]
}

##Location request##
POST PyDrink.com/find/location
Headers: None
Body (JSON):
{
	"store_id": 424
}

The Response will look something like this:
{
    "status":200,
	"name": "Main & Bay Street",
	"address_line_1": "35 First Street",
	"address_line_2": "P.O. Box 310",
	"city": "Moosonee",
	"postal_code": "P0L1Y0",
	"telephone": "(705) 336-2301"
}

##API + Object-Oriented Design##
My API allows transportation of information about Drink object's inventory information
and gives room for a modular approach to finding information about
a drink's availability without highly coupling a Drink to a large
amount of parameters that are required to find stores that carry
a given drink. This way it preserves the low coupling that I maintained
between objects and enhances the OO design by requiring less Models
to get the same results (no need to maintain an Inventory, Product, or Store
model).
Furthermore, this would help enhance cohesion since the data relevant to the program
will relate to a single model that will handle the methods of the API.
The REST API only provides information that is relevant and hides information 
that has no relation to the methods and attributes of the model nor the rest 
of the application. Overall, the information hiding will make the design of 
the system less complex, and increase code reuse since only one model is 
needed to maintain the API and can be used by other models to get information from 
the API; rather than every model contacting the API directly and doing the same 
operations.
The API is also modular in the sense that not only the Composite Endpoint
must be used, rather if an application desires to use this API they can
access just store_ids and interface with the LCBO api directly for different
information, or get location information on specific stores only
rather than all the stores since that is more efficient.

Please take a look at the PDF attached for a deeper explanation of how to API works.