REVIEW 1

	**Fix REST vs SOAP Comparison
	**Figure out Global variables why tkinter needs it for Judi so that you dont lose marks.
	**	Not required for A3 submission, but get it for her asap
	
	MVC seems to be a bit mixed. (-1)
	Code Duplication with the DrinkStorage and the Glass as to parsing files seems to be happening. (-1)
	*DrinkStorage is abstract class, just method signature? What duplication

	Not quite sure as to why a glass (which is a model name) inherits from model? (-1)
	*Glass inherits from DrinkStorage ABC?


	Use of inheritance is weird. Seems as though glass is a model which is inheriting a controller. (-1)
	*DrinkStorage is not a controller. PyDrinkController is... Says this in the README

	Not really sure as to the exact OO practice you are trying to demonstrate mastery of Seems as though a random class was chosen and used to show every OO practice??. (-1)
	*Showing all techniques of OO that are good examples which can be done for this section according to Judi?
	
	You were supposed to have a user story per endpoint (-1)
	*Was I? Each endpoint is a peice of another... One is the composition of all of them.
	
	The endpoints are supposed to be for your app? I'm not sure whats going on with your endpoints. They seem a bit all over the place. (-1)
	*Not sure what you mean here. What is all over the place?
	More than one status code were supposed to be given. What about a CRUD endpoint that doesnt exist? (-1)
	CRUD Breakdown? (-1)
	*Didn't read my justification. I agree should have given more information about my Status codes
	
	The PDF was like a brainstorm session... I had no clue what was going on (-3)
	* The PDF was the breakdown of how to REST API works behind the scenes...
	
REVIEW 2:

	Comparison of SOAP and REST enhanced with the examples from the code.
	Sourced themself?
	*Taken straight from my code. My own ideas... Not sure about citations for this...
	
	Grammatically correct, technically correct and very detailed. Unfortunately design documents are not easy to read 
	(I appreciated the idea of the diagram but all the different colours and spreading across multiple pages made it 
	hard to read and understand).
	* I understand it was hard to read. This will be fixed
	
REVIEW 3:
	
	(-3 marks) Use of unencapsulated global variables in PyDrink.py. The global `w` is also named poorly. 
	Use of globals from different classes is called "common coupling" and is 
	considered a bad practise in procedural programming, let alone OO programming. 
	Consider creating a class that manages the lifecycle of your application,
	maintains your "window" (not w!) as an instance variable of the class. 
	This lifecycle manager should contain the methods `vp_start_gui`, `create_PyDrink` and
	`destroy_PyDrink`.
	*Not sure what is meant here. 

	(-1 mark) PyDrinkController appears to be suitably decoupled from the GUI 
	(I think?) however it does not actually maintain a reference to the GUI 
	(nor vice versa). Interactions are done through globals which are not documented 
	or easy to read. 
	*Is this not the same as above? Tried to limit coupling, not a good thing?

	(-1 mark) The `init` method of PyDrinkController appears to duplicate most of the logic in the 
	`create_PyDrink` function of `PyDrink.py`.
	*Not the same thing as above as well?

	(-1 mark) PyDrinkController catches `BaseException` in the method `translate_text` and other methods.
	More specific exceptions should be caught so as not to conflate error handling cases and improve maintainability.
	*Fair I missed this, changed.

	*Lost 5 marks for the same thing?
	
	
	(-1 mark) Repetitive exception handling on lines 41-69 of Drink.py. The `try` and `except`
	blocks can all be combined here as there are no intermediate operations between each index 
	access, and the error handling case for each property is to simply set it to the empty string. 
	Try and except blocks can have multipl lines of code in them, but the author does not appear 
	to understand this from the showcased example.
	*No exception handling in Drink.py, maybe you meant Glass.py. How could this be done? Each property
	might or might not have values... So Glass may have values but name doesnt, so then exception would
	be thrown on the first part and not get the rest parsed...

	(-1 mark) Unable to identify composition relationship. From the README: 
	"It is important to note though, that there is a fair bit of coupling 
	between Cocktail and Glass classes, but this is required because the 
	Glass class can't exist without the Cocktail class." 
	This "coupling" is appropriate, it's a composition relationship, (i.e.
	Cocktail owns Glass).
	*Its in the class. There is a dictionary of Cocktails... Glass is composed
	of cocktails.
	
	(-2 marks) Inappropriately cited. Uses a self-citation and comparison 
	infographic as the single "real" source. 
	Author should put more effort into research to back claims.
	*Well the point of this was to look at our implementation of REST vs SOAP
	and compare them from an OO standpoint. I cite myself because Im using examples
	from my code to make claims about what I believe to be true. There is
	no necessarily right answer, each argument I make has a counter.

	(-1 mark) Uncited argument that SOAP services are "highly coupled" is inaccurate.
	SOAP services provide object descriptors to a client to instantiate classes, 
	which can then be passed data to delegate requests. 
	This is not problematic as stated. Changes to SOAP service implementations 
	do not require clients to be modified as long as the methods, 
	expected inputs and outputs, and data formats do not change. 
	Versioning an API is common practise, as is versioning Object Oriented
	software... it's not an indication of SOAP being "highly coupled".
	*Theres a counter argument. You are correct, but what I said isn't wrong?
	there is still high coupling between server and client at all times. If the 
	server changes anything the client has to immediately conform unlike REST.

	(-1 mark) Uncited argument that SOAP has low cohesion because the services
	are designed for interoperability is flawed.
	*How so? My translate API does so many things (I only used a small portion of it)
	so the service is trying to accomodate all users with one service instead of
	making atomic services that have one purpose.

	(-1 mark) Uncited argument that REST via CRUD provides more modularity
	than SOAP is flawed. SOAP services can have an arbitrary number of single
	purpose methods, just as the REST architecture may allow for one to 
	implement many operations on an arbitrary number of resources.
	*Yes, but those are different services no? With the same resource I can
	do multiple different operations.
	
	(-1 mark) Author attempts to justify having only one endpoint with a POST request,
	however there are three distinct endpoints. The author should note that for example,
	`/find` and `/find/stores` are two distinct endpoints and requests, 
	which return distinct responses.
	*Sorry title of section in design doc was "Justification for Endpoint being only 1 POST request",
	renamed, but by reading the text underneath its clear there are 3 endpoints and 3 requests...

	(-1 mark) Justification for only "create" actions on resources is present 
	though unconventional. Since the POST bodies only have one property, 
	it is unclear why the author thought that "creating" a search made sense in a 
	CRUD context, when it is clear that the requests exclusively *retreive* 
	iinformation. The author should consider changing the first two endpoints 
	to GET requests with a `?drink_name=` query parameter, 
	and the last endpoint to a GET request with a `?store_id=` query parameter.
	*Clearly didnt come to class. Mentioned how this was bad usability. Not really
	unconventional. Many websites today use POST requests for searching. 
	I "create" a search not just retrieve information.

	Endpoints appear to be sufficient for doing meaningful work, 
	however it was initially very confusing to understand that the documented 
	REST API is simply a wrapper around an existing external API. 
	An explanation of this via some sort of abstract/rationale/motivation 
	would have been helpful.
	*Its in the docs that I'm calling other APIs didn't specifically mention
	wrapper, but I'm showing this in all my docs. This is the entire reason
	for the PDF..."
	
	Endpoints are organized intuitively enough in 
	"FindStoresAPIExplanation.txt", though it should be noted that 
	the provided PDF was nearly incomprehensible.
	*Fair, this I am aware of and will be re-written in a more readable fashion.
	
	(-2 marks) Documents are *extremely* difficult to read and follow.
	The provided PDF has very tiny text which appears to be the dumped 
	response from some existing API call (not one that was designed by the author). 
	This document is annotated, however the hand-written annotations are messy, 
	and difficult to follow with the excessive use of arrows and colour 
	(yellow is a bad colour choice for a white background).
	*Understandable. Will fix document
	
	*It seems to me the review was just upset that I didnt make an entirely new
	API rather that I made a wrapper. Is this wrong? He was taking off a lot of
	marks for this.
